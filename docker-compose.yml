version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pantheon-postgres
    environment:
      POSTGRES_DB: pantheon_db
      POSTGRES_USER: pantheon_user
      POSTGRES_PASSWORD: pantheon_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pantheon_user -d pantheon_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pantheon-network

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: pantheon-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pantheon-network

  # Orchestration Layer (FastAPI Backend)
  orchestration:
    build:
      context: .
      dockerfile: orchestration/Dockerfile
    container_name: pantheon-orchestration
    environment:
      - DATABASE_URL=postgresql://pantheon_user:pantheon_password@postgres:5432/pantheon_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=true
      - CORS_ORIGINS=http://localhost:3000
    ports:
      - "8000:8000"
    volumes:
      - ./orchestration:/app/orchestration
      - ./agents:/app/agents
      - ./database:/app/database
      - ./shared:/app/shared
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        alembic upgrade head &&
        uvicorn main:app --host 0.0.0.0 --port 8000 --reload
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - pantheon-network

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: .
      dockerfile: orchestration/Dockerfile
    container_name: pantheon-celery-worker
    environment:
      - DATABASE_URL=postgresql://pantheon_user:pantheon_password@postgres:5432/pantheon_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./orchestration:/app/orchestration
      - ./agents:/app/agents
      - ./database:/app/database
      - ./shared:/app/shared
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A orchestration.celery_app worker --loglevel=info
    networks:
      - pantheon-network

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: .
      dockerfile: orchestration/Dockerfile
    container_name: pantheon-celery-beat
    environment:
      - DATABASE_URL=postgresql://pantheon_user:pantheon_password@postgres:5432/pantheon_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./orchestration:/app/orchestration
      - ./agents:/app/agents
      - ./database:/app/database
      - ./shared:/app/shared
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A orchestration.celery_app beat --loglevel=info
    networks:
      - pantheon-network

  # Dashboard (Next.js Frontend)
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: pantheon-dashboard
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000/ws
    ports:
      - "3000:3000"
    volumes:
      - ./dashboard:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - orchestration
    command: npm run dev
    networks:
      - pantheon-network

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: pantheon-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pantheon-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: pantheon-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - pantheon-network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: pantheon-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - orchestration
      - dashboard
    networks:
      - pantheon-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  pantheon-network:
    driver: bridge
